import math
def gcd(a, h):
    temp = 0
    while(1):
        temp = a % h
        if (temp == 0):
            return h
        a = h
        h = temp
p = int(input("Enter the Prime number P: "))
q = int(input("Enter the Prime number Q: "))
n = p*q
e = 2
phi = (p-1)*(q-1)
while (e < phi):
# e must be co-prime to phi and
# smaller than phi.
    if(gcd(e, phi) == 1):
        break
    else:
        e = e+1
# Private key (d stands for decrypt)
# choosing d such that it satisfies
# d*e = 1 + k * totient
k = 2
d = (1 + (k*phi))/e
# Message to be encrypted
msg=int(input("Enter the Message which we wanted to encrypt : "))
print("Message data = ", msg)
# Encryption c = (msg ^ e) % n
c = pow(msg, e)
c = math.fmod(c, n)
print("Encrypted data = ", c)
# Decryption m = (c ^ d) % n
m = pow(c, d)
m = math.fmod(m, n)
print("Original Message Sent = ", m)
-------------------------------------------------------------------------
import math

def gcd(a, h):
    temp = 0
    while(1):
        temp = a % h
        if (temp == 0):
            return h
        a = h
        h = temp

def mod_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while (e > 0):
        temp1 = temp_phi // e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if (temp_phi == 1):
        return d + phi

p = int(input("Enter the Prime number P: "))
q = int(input("Enter the Prime number Q: "))

n = p * q
e = 2
phi = (p - 1) * (q - 1)

while (e < phi):
    if (gcd(e, phi) == 1):
        break
    else:
        e = e + 1

d = mod_inverse(e, phi)

msg = int(input("Enter the Message which we wanted to encrypt: "))
print("Message data =", msg)

c = pow(msg, e, n)
print("Encrypted data =", c)

m = pow(c, d, n)
print("Original Message Sent =", m)
